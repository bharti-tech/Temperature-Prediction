# -*- coding: utf-8 -*-
"""monitoring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LG7LXmjMi4zLhD7R46TiQziqgWqX7pQF

**Temperature Prediction using the Machine learning algorithm**
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

# Importing the temperature readings file
temp_set=pd.read_csv("/content/Readings.csv")
#Visualisation of csv file
temp_set

#Getting column at given specified location and storing it in x and y variable
x= temp_set.iloc[:,0:1].values 
y= temp_set.iloc[:,1].values

#Display array x
x

#Display array y
y

#Fitting the Linear Regression to the dataset of temperature readings  
from sklearn.linear_model import LinearRegression  
lin_reg= LinearRegression()  
lin_reg.fit(x,y)

#Fitting the Polynomial regression to the dataset  
from sklearn.preprocessing import PolynomialFeatures  
poly_reg= PolynomialFeatures(degree= 3)  
x_poly= poly_reg.fit_transform(x)  
lin_reg2 =LinearRegression()  
lin_reg2.fit(x_poly, y)



#Visulaizing the result for Linear Regression model for temperature prediction
plt.scatter(x,y,color="purple")  #Denotting the actual value as scattered points
plt.plot(x,lin_reg.predict(x), color="orange")  #Denotting the predicted value as line graph
plt.title("Temperature prediction model(Linear Regression)")  #Tittle of the graph 
#labelling the x and y axis as time and temp respectively
plt.xlabel("Time (in min)")  
plt.ylabel("Temp")  
#Display of the graph 
plt.show()

#Visulaizing the result for Polynomial Regression for temperature prediction 
plt.scatter(x,y,color="purple")  #Denotting the actual value as scattered points
plt.plot(x, lin_reg2.predict(poly_reg.fit_transform(x)), color="green")  #Denotting the predicted value as line graph
plt.title("Temp pred model(Polynomial Regression)")   #Tittle of the graph 
#labelling the x and y axis as time and temp respectively
plt.xlabel("time(in min)")       
plt.ylabel("Temp")  
# Display of the graph 
plt.show()

# Predicting linear related values to the given data
lin_pred = lin_reg.predict([[140.0]])  
print(lin_pred)

# Predicting polynomial related values to the given data
poly_pred = lin_reg2.predict(poly_reg.fit_transform([[140.0]]))  
print(poly_pred)

x
res=x.flat[0]
res

# Next 5 Predicted Values by Linear regression Prediction model
for ii in range(res,res+35,5):
  lin_pred = lin_reg.predict([[ii]])  
  print(lin_pred,ii)

"""# New Section"""

# Next 5 Predicted Values by Polynomial regression Prediction
for ii in range(res,res+35,15):
  poly_pred = lin_reg2.predict(poly_reg.fit_transform([[ii]]))  
  print(poly_pred,ii)